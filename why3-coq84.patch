--- ./src/coq-tactic/why3tac.ml.orig	2012-07-19 06:05:03.000000000 -0600
+++ ./src/coq-tactic/why3tac.ml	2012-08-23 13:57:51.993724381 -0600
@@ -473,7 +473,7 @@ and tr_global_ts dep env r =
           let (_,vars), _, t = decomp_type_quantifiers env ty in
           if not (is_Set t) && not (is_Type t) then raise NotFO;
           let id = preid_of_id (Nametab.basename_of_global r) in
-          let ts = match (Global.lookup_constant c).const_body with
+          let ts = match (body_of_constant (Global.lookup_constant c)) with
             | Some b ->
                 let b = force b in
                 let tvm, env, t = decomp_type_lambdas Idmap.empty env vars b in
@@ -621,7 +621,7 @@ and make_one_ls dep env r =
   add_poly_arity ls vars
 
 and decompose_definition dep env c =
-  let dl = match (Global.lookup_constant c).const_body with
+  let dl = match (body_of_constant (Global.lookup_constant c)) with
     | None ->
         [ConstRef c, None]
     | Some b ->
@@ -1091,8 +1091,6 @@ let tr_top_decl = function
   | _, Lib.CompilingLibrary _
   | _, Lib.OpenedModule _
   | _, Lib.ClosedModule  _
-  | _, Lib.OpenedModtype _
-  | _, Lib.ClosedModtype _
   | _, Lib.OpenedSection _
   | _, Lib.ClosedSection _
   | _, Lib.FrozenState _ -> ()
--- ./src/coq-tactic/g_why3tac.ml.orig	2012-07-19 06:05:03.000000000 -0600
+++ ./src/coq-tactic/g_why3tac.ml	2012-08-23 13:59:15.218727554 -0600
@@ -47,20 +47,20 @@ let _ =
               (Util.dummy_loc,
                Tacexpr.TacExtend (Util.dummy_loc, "Why3", l))))
       []
-  with e -> Pp.pp (Cerrors.explain_exn e)
+  with e -> Pp.pp (Errors.print e)
 let _ =
   Egrammar.extend_tactic_grammar "Why3"
     [[Egrammar.GramTerminal "why3";
       Egrammar.GramNonTerminal
         (Util.dummy_loc, Genarg.StringArgType,
-         Extend.Aentry ("prim", "string"), Some (Names.id_of_string "s"))];
+         Pcoq.Aentry ("prim", "string"), Some (Names.id_of_string "s"))];
      [Egrammar.GramTerminal "why3";
       Egrammar.GramNonTerminal
         (Util.dummy_loc, Genarg.StringArgType,
-         Extend.Aentry ("prim", "string"), Some (Names.id_of_string "s"));
+         Pcoq.Aentry ("prim", "string"), Some (Names.id_of_string "s"));
       Egrammar.GramTerminal "timelimit";
       Egrammar.GramNonTerminal
-        (Util.dummy_loc, Genarg.IntArgType, Extend.Aentry ("prim", "integer"),
+        (Util.dummy_loc, Genarg.IntArgType, Pcoq.Aentry ("prim", "integer"),
          Some (Names.id_of_string "n"))]]
 let _ =
   List.iter Pptactic.declare_extra_tactic_pprule
--- ./lib/coq/int/Int.v.orig	2012-07-19 06:05:03.000000000 -0600
+++ ./lib/coq/int/Int.v	2012-08-23 13:57:52.000724506 -0600
@@ -13,7 +13,7 @@ Lemma infix_lseq_Zle :
   forall x y, infix_lseq x y <-> Zle x y.
 Proof.
 intros x y.
-apply iff_Symmetric.
+apply RelationClasses.iff_Symmetric.
 apply Zle_lt_or_eq_iff.
 Qed.
 
